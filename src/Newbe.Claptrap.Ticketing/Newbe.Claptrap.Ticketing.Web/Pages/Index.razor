@page "/"
@inject IHttpClientFactory Http
@inject IJSRuntime JsRuntime
@implements IDisposable
@using Microsoft.Extensions.Logging;
@using Newbe.Claptrap.Ticketing.Web.Models.Api
@inject ILogger<Index> Logger;
<div class="row">

    <div class="col-md-10 order-md-1">
        <h4 class="mb-3 mt-xl-1">车票-线路</h4>
        <div class="row">

            <div class="col-md-10 mb-3">
                <p class="text-danger">@errorMessage</p>
            </div>
            <div class="col-md-6 mb-3">
                <label for="country">始发地</label>
                <select class="custom-select d-block w-100" id="SelectFrom" @bind="@fromStation">
                    @if (allStations != null)
                    {
                        foreach (var item in allStations)
                        {
                            <option value="@item.StationId">@item.StationName</option>
                        }
                    }
                    else
                    {
                        <option value="" @ref="_fromEmptyOption">-请选择-</option>
                    }
                </select>
            </div>
            <div class="col-md-6 mb-3">
                <label for="state">目的地</label>
                <select class="custom-select d-block w-100" id="SelectTo" @bind="@toStation">
                    @if (allStations != null)
                    {
                        foreach (var item in allStations)
                        {
                            <option value="@item.StationId">@item.StationName</option>
                        }
                    }
                    else
                    {
                        <option value="" @ref="toEmptyOption">-请选择-</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary btn-lg btn-block" type="button" @onclick="CheckFindTran">查询</button>
        </div>

        <h4 class="mb-3"></h4>
        <h4 class="d-flex justify-content-between align-items-center mb-3">
            @if (_seatOutput == null)
            {
                <span class="text-muted">选择始发地和目的地</span>
            }
            else
            {
                <span class="text-muted">@_seatOutput.FromStationName --> @_seatOutput.ToStationName 共计@(_seatOutput.Items.Count())个车次</span>
            }
        </h4>
        <ul class="list-group mb-3">
            @if (_seatOutput == null)
            {
                <li class="list-group-item d-flex justify-content-between lh-condensed">
                    无车次
                </li>
            }
            else
            {
                foreach (var item in _seatOutput.Items)
                {
                    <li class="list-group-item">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="my-0">车次：@item.TrainId</h6>
                                <h6 class="my-0">剩余座位数：@item.LeftCount</h6>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-primary btn-sm" type="button" @onclick="@(() => ReservationSeat(_seatOutput.FromStationId, _seatOutput.ToStationId, item.TrainId))">预定</button>
                                <input placeholder="座位号0-9999之间" @bind="_seatNumber" class="input-small"/>
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>

    </div>
</div>

@code{
    public string fromStation;
    public string toStation;
    public string errorMessage = "";
    List<PassStation> allStations; //所有座位数
    DotNetObjectReference<Index> _dotNetReference;
    private ElementReference _fromEmptyOption;
    private ElementReference toEmptyOption;

    protected override async Task OnInitializedAsync()
    {
        allStations = await Http.CreateClient("train").GetFromJsonAsync<List<PassStation>>($"api/Station/GetAllStation");
        allStations.Insert(0, new PassStation {StationId = 0, StationName = "-请选择-"});
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _dotNetReference = DotNetObjectReference.Create(this);
        }
    }

    GetSeatOutput _seatOutput;
    string _seatNumber;

    /// <summary>
    /// 查询剩余组座位数
    /// </summary>
    /// <returns></returns>
    public async Task CheckFindTran()
    {
        if (string.IsNullOrEmpty(fromStation) || fromStation == "0")
        {
            errorMessage = "请选择始发站";
            return;
        }
        if (string.IsNullOrEmpty(toStation) || toStation == "0")
        {
            errorMessage = "请选择目的地";
            return;
        }
        if (fromStation == toStation)
        {
            errorMessage = "始发地和目的地不能一样";
            return;
        }

        _seatOutput = await Http.CreateClient("train").GetFromJsonAsync<GetSeatOutput>($"api/Seat?FromStationId={fromStation}&ToStationId={toStation}");
    }

    /// <summary>
    /// 订座
    /// </summary>
    /// <returns></returns>
    public async Task ReservationSeat(int fromStationId, int toStationId, int trainId)
    {
        var seatItem = _seatOutput.Items.FirstOrDefault(q => q.TrainId == trainId);
        if (seatItem != null)
        {
            if (!int.TryParse(_seatNumber, out var intSeatNumber))
            {
                errorMessage = "座位号必须为数字";
                return;
            }
            var seatId = $"{trainId}{intSeatNumber:0000}";
            Logger.LogDebug($"预定的座位号={seatId}");
            var seatInput = new TakeSeatInput
            {
                FromStationId = fromStationId,
                ToStationId = toStationId
            };
            var resp = await Http.CreateClient("train").PostAsJsonAsync($"api/Seat/{seatId}", seatInput);
            if (resp.IsSuccessStatusCode)
            {
                var response = await resp.Content.ReadFromJsonAsync<BlazorJsonResponse>();
                errorMessage = response.Message;
                if (response.Status == "1")
                {
                    await CheckFindTran();
                    _seatNumber = string.Empty;
                    StateHasChanged();
                }
            }
        }
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    //Now dispose our object reference so our component can be garbage collected
        _dotNetReference?.Dispose();
    }

}