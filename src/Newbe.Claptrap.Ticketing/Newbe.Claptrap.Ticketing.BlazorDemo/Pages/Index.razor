@page "/"
@using System.Text
@inject IHttpClientFactory http
@inject IJSRuntime jsRuntime
@implements IDisposable
@using Microsoft.Extensions.Logging;
@inject ILogger<Index> logger;
<div class="row">

    <div class="col-md-10 order-md-1">
        <h4 class="mb-3 mt-xl-1">车票-线路</h4>
        <div class="row">

            <div class="col-md-10 mb-3"> <p class="text-danger">@errorMessage</p></div>
            <div class="col-md-6 mb-3">
                <label for="country">始发地</label>
                <select class="custom-select d-block w-100" id="SelectFrom" @bind="@fromStation">
                    @if (allStations != null)
                    {
                        foreach (var item in allStations)
                        {
                            <option value="@item.StationId">@item.StationName</option>
                        }
                    }
                    else
                    {
                        <option value="" @ref="fromEmptyOption">-请选择-</option>
                    }
                </select>
            </div>
            <div class="col-md-6 mb-3">
                <label for="state">目的地</label>
                <select class="custom-select d-block w-100" id="SelectTo" @bind="@toStation">
                    @if (allStations != null)
                    {
                        foreach (var item in allStations)
                        {
                            <option value="@item.StationId">@item.StationName</option>
                        }
                    }
                    else
                    {
                        <option value="" @ref="toEmptyOption">-请选择-</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary btn-lg btn-block" type="button" @onclick="checkFindTran">查询</button>
        </div>

        <h4 class="mb-3"></h4>
        <h4 class="d-flex justify-content-between align-items-center mb-3">
            @if (seatOutput == null)
            {
                <span class="text-muted">选择始发地和目的地</span>
            }
            else
            {
                <span class="text-muted">@seatOutput.FromStationName --> @seatOutput.ToStationName 共计@(seatOutput.Items.Count())个车次</span>
            }
        </h4>
        <ul class="list-group mb-3">
            @if (seatOutput == null)
            {
                <li class="list-group-item d-flex justify-content-between lh-condensed">
                    无车次
                </li>
            }
            else
            {
                foreach (var item in seatOutput.Items)
                {
                    <li class="list-group-item">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="my-0">车次：@item.TrainId</h6>
                                <h6 class="my-0">剩余座位数：@item.LeftCount</h6>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-primary btn-sm" type="button" @onclick="@(()=>ReservationSeat(seatOutput.FromStationId,seatOutput.ToStationId,item.TrainId))">预定</button>
                                <input placeholder="座位号0-9999之间" @bind="item.SteadId" class="input-small" />
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>

    </div>
</div>
@code{
    public string fromStation;
    public string toStation;
    public string errorMessage = "";
    List<PassStation> allStations;//所有座位数
    DotNetObjectReference<Index> dotNetReference;
    private ElementReference fromEmptyOption;
    private ElementReference toEmptyOption;
    protected override async Task OnInitializedAsync()
    {
        allStations = await http.CreateClient("train").GetFromJsonAsync<List<PassStation>>($"api/Train/GetAllStation");
        allStations.Insert(0, new PassStation() { StationId = 0, StationName = "-请选择-" });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            dotNetReference = DotNetObjectReference.Create(this);
            await jsRuntime.InvokeVoidAsync("trainJsFunctions.generatorDotnetObject", dotNetReference);
            await jsRuntime.InvokeAsync<object>("trainJsFunctions.fixOptionValue", this.fromEmptyOption);
            await jsRuntime.InvokeAsync<object>("trainJsFunctions.fixOptionValue", this.toEmptyOption);
        }
    }
    GetSeatOutput seatOutput;
    /// <summary>
    /// 查询剩余组座位数
    /// </summary>
    /// <param name="tranid"></param>
    /// <returns></returns>
    public async Task checkFindTran()
    {
        if (string.IsNullOrEmpty(fromStation) || fromStation == "0")
        {
            errorMessage = "请选择始发站";
            return;
        }
        if (string.IsNullOrEmpty(toStation) || toStation == "0")
        {
            errorMessage = "请选择目的地";
            return;
        }
        if (fromStation == toStation)
        {
            errorMessage = "始发地和目的地不能一样";
            return;
        }
        //POST 数据用的 ，但现在是GET 注释掉吧
        //GetSeatInput seatInput = new GetSeatInput();
        //seatInput.FromStationId = Convert.ToInt32(fromStation);
        //seatInput.ToStationId = Convert.ToInt32(toStation);

        seatOutput = await http.CreateClient("train").GetFromJsonAsync<GetSeatOutput>($"api/Seat?FromStationId={fromStation}&ToStationId={toStation}");

        //if (response.IsSuccessStatusCode)
        //{
        //    seatOutput =await response.Content.ReadFromJsonAsync<GetSeatOutput>();
        //}
    }
    /// <summary>
    /// 订座
    /// </summary>
    /// <returns></returns>
    public async Task ReservationSeat(int fromStationId, int ToStationId, int trainId)
    {
        string trueseatid = trainId.ToString();
        SeatListItem seatItem = seatOutput.Items.Find(q => q.TrainId == trainId);
        if (seatItem != null)
        {
            int zwid = 0;
            if (!int.TryParse(seatItem.SteadId, out zwid))
            {
                errorMessage = "座位号必须为数字";
                return;
            }
            string sjseatid = trainId + zwid.ToString().PadLeft(4, '0');
            logger.LogDebug($"预定的座位号={sjseatid}");
            TakeSeatInput seatInput = new TakeSeatInput();
            seatInput.FromStationId = fromStationId;
            seatInput.ToStationId = ToStationId;
            var respone = await http.CreateClient("train").PostAsJsonAsync($"api/Seat/{sjseatid}", seatInput);
            if (respone.IsSuccessStatusCode)
            {
                //logger.LogDebug(respone.Content.ReadAsStringAsync().Result);
                BlazorJsonRespone jsonRespone =await respone.Content.ReadFromJsonAsync<BlazorJsonRespone>();
                errorMessage = jsonRespone.message;
                if (jsonRespone.status == "1")
                {
                    seatItem.LeftCount = seatItem.LeftCount - 1;
                    //成功 影响实体变化
                    StateHasChanged();
                }
            }
        }

        await Task.FromResult("");
    }
    public void Dispose()
    {
        GC.SuppressFinalize(this);
        if (dotNetReference != null)
        {
            //Now dispose our object reference so our component can be garbage collected
            dotNetReference.Dispose();
        }
    }


    public class PassStation
    {
        public int StationId { get; set; }
        public string StationName { get; set; }
    }
    public class GetSeatOutput
    {
        public int FromStationId { get; set; }
        public int ToStationId { get; set; }
        public string FromStationName { get; set; }
        public string ToStationName { get; set; }
        public List<SeatListItem> Items { get; set; }
    }

    public class SeatListItem
    {
        public int TrainId { get; set; }
        public int LeftCount { get; set; }
        /// <summary>
        /// 座位号
        /// </summary>
        public string SteadId { get; set; }
    }
    public class GetSeatInput
    {
        public int FromStationId { get; set; }
        public int ToStationId { get; set; }
    }
    public class TakeSeatInput
    {
        public int FromStationId { get; set; }
        public int ToStationId { get; set; }
    }
    public class BlazorJsonRespone
    {
        public string status { get; set; }
        public string message { get; set; }
    }
}